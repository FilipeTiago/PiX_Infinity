#!/usr/bin/env bash
# Audio-only player with dynamic wallpaper + gamepad via mpv IPC
# Usage: pix_mpv_music "<path/to/track>"
set -Eeuo pipefail

LOG="/tmp/pix_mpv_music.$$.log"
exec > >(stdbuf -oL tee -a "$LOG") 2>&1
echo "=== pix_mpv_music ENTRY $(date -Is) pid=$$ ==="

need(){ command -v "$1" >/dev/null 2>&1 || { echo "[music] missing: $1" >&2; exit 2; }; }
need realpath; need xinit; need feh; need convert; need mpv

RAW="${1:?need a file}"
RAW="${RAW//\\ / }"
SEL="$(realpath -m "$RAW")"
DIR="$(dirname -- "$SEL")"
BASE="$(basename -- "$SEL")"
TITLE="${BASE%.*}"

ROMROOT="$(pix_rom_location music 2>/dev/null || true)"
[ -n "$ROMROOT" ] || ROMROOT="$HOME/RetroPie/roms/music"
GMXML="$HOME/.emulationstation/gamelists/music/gamelist.xml"

echo "[music] sel=$SEL dir=$DIR base=$BASE romroot=$ROMROOT"

# Build playlist
mapfile -d '' FILES < <(find -L "$DIR" -maxdepth 1 -type f \
  -iregex '.*\.\(mp3\|flac\|m4a\|aac\|ogg\|opus\|wav\|wma\)' -print0 | sort -z)
((${#FILES[@]})) || { echo "[music] no audio files in $DIR"; exit 1; }

START_INDEX=0
for i in "${!FILES[@]}"; do
  [ "$(realpath -m "${FILES[$i]}")" = "$SEL" ] && START_INDEX="$i" && break
done
PL="/tmp/pix_mpv_music.$$.m3u"
> "$PL"; for f in "${FILES[@]}"; do printf '%s\n' "$f" >> "$PL"; done
echo "[music] files=${#FILES[@]} start_index=$START_INDEX pl=$PL"

# --- Cover helpers ---
image_from_gamelist() {
  local abs="$1" root="${ROMROOT%/}" gm="$GMXML"
  [ -s "$gm" ] || return 1
  local rel="${abs#$root/}"
  awk -v want="$rel" '
    BEGIN{RS="</game>"; FS="\n"}
    {
      p=""; img="";
      for(i=1;i<=NF;i++){
        if($i ~ /<path>/){ s=$i; gsub(/.*<path>|<\/path>.*/,"",s); gsub(/^\.\/+/,"",s); p=s }
        if($i ~ /<image>/){ s=$i; gsub(/.*<image>|<\/image>.*/,"",s); img=s }
      }
      if(p==want){ print img; exit }
    }' "$gm"
}
resolve_img() {
  local p="$1"
  [ -n "$p" ] || return 1
  case "$p" in
    ~/*) eval "p=$p" ;;
    /*)  : ;;
    *)   p="$ROMROOT/$p" ;;
  esac
  [ -s "$p" ] && printf '%s\n' "$p"
}
pick_cover_for() {
  local f="$1" d="$(dirname -- "$f")" t="$(basename -- "$f")"; t="${t%.*}"
  local gi img; gi="$(image_from_gamelist "$f" || true)"; img="$(resolve_img "$gi" || true)"
  [ -n "$img" ] && { printf '%s\n' "$img"; return; }
  for C in "$d/$t.jpg" "$d/$t.png" "$d/folder.jpg" "$d/folder.png" \
           "$d/cover.jpg" "$d/cover.png" "$d/album.jpg" "$d/album.png" \
           "$d/front.jpg" "$d/front.png"; do
    [ -s "$C" ] && { printf '%s\n' "$C"; return; }
  done
  local rel="${f#$ROMROOT/}" base="$t"
  for C in \
    "$HOME/.emulationstation/downloaded_images/music/${rel%/*}/${base}.jpg" \
    "$HOME/.emulationstation/downloaded_images/music/${base}.jpg" \
    "$HOME/.emulationstation/downloaded_images/music/${rel%/*}.jpg"
  do [ -s "$C" ] && { printf '%s\n' "$C"; return; }; done
  local fld="$(basename "$d")"
  for C in "$HOME/.emulationstation/downloaded_images/music/covers/$fld/cover.jpg" \
           "$HOME/.emulationstation/downloaded_images/music/covers/$fld/cover.png"; do
    [ -s "$C" ] && { printf '%s\n' "$C"; return; }
  done
}

# --- Wallpaper generator ---
WALL="/tmp/pix_music_wall.now.png"
make_wall() {
  local title="$1" cover="$2" out="$3"
  local tmp="${out}.tmp"
  /usr/bin/convert -size 1280x720 "canvas:#101014" "PNG:${tmp}" 2>>"$LOG" || true
  if [ -n "$cover" ] && [ -s "$cover" ]; then
    /usr/bin/convert "PNG:${tmp}" \
      \( "$cover" -resize 540x540\> -background none -gravity center -extent 540x540 \) \
      -gravity West -geometry +80+0 -composite \
      -gravity Northwest -fill white -pointsize 48 -annotate +660+180 "$title" \
      "PNG:${tmp}" 2>>"$LOG" || true
  else
    /usr/bin/convert "PNG:${tmp}" \
      -gravity center -fill "#888" -pointsize 120 -annotate +0-80 "♪" \
      -gravity south -fill white -pointsize 42 -annotate +0+80 "$title" \
      "PNG:${tmp}" 2>>"$LOG" || true
  fi
  mv -f "$tmp" "$out" 2>/dev/null || cp -f "$tmp" "$out" 2>/dev/null || true
}
COVER="$(pick_cover_for "$SEL" || true)"
echo "[music] initial cover=${COVER:-none}"
make_wall "$TITLE" "${COVER:-}" "$WALL" || true
echo "[music] wallpaper ready: $WALL"

# --- Client (X) ---
SOCK="/tmp/mpv-music.$$.sock"
CLIENT="/tmp/pix_mpv_music_client.$$.sh"
cat > "$CLIENT" <<'EOF'
#!/usr/bin/env bash
set -Eeuo pipefail
echo "[client] DISPLAY=$DISPLAY who=$(id -un)" >&2

WALL="${WALL:?}"; PL="${PL:?}"; SOCK="${SOCK:?}"; START_INDEX="${START_INDEX:?}"
ROMROOT="${ROMROOT:?}"; GMXML="${GMXML:?}"

# --- AUDIO ENV (Pulse/PipeWire) ---
USR_UID="$(id -u)"
export XDG_RUNTIME_DIR="${XDG_RUNTIME_DIR:-/run/user/$USR_UID}"
if [ -S "$XDG_RUNTIME_DIR/pulse/native" ]; then
  export PULSE_SERVER="unix:$XDG_RUNTIME_DIR/pulse/native"
fi
export JACK_NO_START_SERVER=1

# Show wallpaper
/usr/bin/feh -F -x -Z --no-menus --hide-pointer --reload 1 "$WALL" >/dev/null 2>&1 &
FEHPID=$!

# Pad + watcher
/usr/local/bin/pix_padmap_mpv_music "$SOCK" >/tmp/pix_padmap_mpv_music.$$.log 2>&1 &  PADPID=$!
/usr/local/bin/pix_mpv_music_watch "$SOCK" "$WALL" "$ROMROOT" "$GMXML" >/tmp/pix_mpv_music_watch.$$.log 2>&1 &  WATPID=$!

# Optional mpv log when debugging
MPVLOG=""
[ "${PIX_MUSIC_DEBUG:-0}" = "1" ] && MPVLOG="--log-file=/tmp/mpv-music.$$.log"

# Force Pulse, avoid terminal, keep IPC
exec /usr/bin/mpv --ao=pulse $MPVLOG --no-video --no-terminal \
  --input-ipc-server="$SOCK" \
  --playlist="$PL" \
  --playlist-start="$START_INDEX" \
  --save-position-on-quit=no
EOF
chmod +x "$CLIENT"

# Export for heredoc
export WALL PL SOCK START_INDEX ROMROOT GMXML

VT="$(fgconsole 2>/dev/null || echo 8)"
echo "[music] starting X on vt$VT…"
xinit "$CLIENT" -- :1 vt"$VT" -quiet -nolisten tcp || true

