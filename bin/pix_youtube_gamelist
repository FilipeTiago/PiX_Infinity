#!/usr/bin/env bash
set -euo pipefail
need(){ command -v "$1" >/dev/null 2>&1 || { echo "[yt-gamelist] missing: $1" >&2; exit 2; }; }
need pix_rom_location; need jq

ROM_ROOT="$(pix_rom_location youtube || true)"; [ -n "$ROM_ROOT" ] || { echo "[yt-gamelist] ROM root not found"; exit 1; }
[ -d "$ROM_ROOT" ] || { echo "[yt-gamelist] Not a directory: $ROM_ROOT"; exit 1; }

META_DIR="$HOME/.emulationstation/downloaded_images/youtube/meta"
GAMELIST="$ROM_ROOT/gamelist.xml"

xml_escape(){ sed -e 's/&/\&amp;/g' -e 's/</\&lt;/g' -e 's/>/\&gt;/g' -e 's/\"/\&quot;/g' -e "s/'/\&apos;/g"; }

tmp="$(mktemp)"; trap 'rm -f "$tmp"' EXIT
{
  echo '<?xml version="1.0"?>'
  echo '<gameList>'
} > "$tmp"

count=0
while IFS= read -r -d '' f; do
  rel="${f#$ROM_ROOT/}"
  base="$(basename "$f" .sh)"
  meta="$META_DIR/$(printf '%s' "$base" | tr '[:upper:]' '[:lower:]' | sed -E 's/[^a-z0-9]+/_/g; s/^_+//; s/_+$//').json"

  title="$base"; desc=""; image=""
  if [ -f "$meta" ]; then
    title="$(jq -r '.title // empty' "$meta")"; [ -z "$title" ] && title="$base"
    desc="$(jq -r '.description // empty' "$meta")"
    image="$(jq -r '.image // empty' "$meta")"
  fi

  {
    echo '  <game>'
    echo "    <path>./$(printf '%s' "$rel" | xml_escape)</path>"
    echo "    <name>$(printf '%s' "$title" | xml_escape)</name>"
    [ -n "$image" ] && echo "    <image>$(printf '%s' "$image" | xml_escape)</image>"
    [ -n "$desc" ] && echo "    <desc>$(printf '%s' "$desc" | xml_escape)</desc>"
    echo '  </game>'
  } >> "$tmp"
  count=$((count+1))
done < <(find "$ROM_ROOT" -type f -iname '*.sh' -print0 | sort -z)

echo '</gameList>' >> "$tmp"
mv "$tmp" "$GAMELIST"
chmod 644 "$GAMELIST"
echo "[yt-gamelist] wrote $GAMELIST (items: $count)"
