#!/usr/bin/env bash
# Fetch radio stations from RadioBrowser and write .m3u files under the Radio ROM root.
# Folder layout: <ROM_ROOT>/<CC>/<genre>/Station.m3u
# Logos saved to: ~/.emulationstation/downloaded_images/radio/logos/<CC>/<genre>/Station.(png|jpg|…)
#
# Options:
#   --country "PT,US,JP"     Comma-separated ISO country codes (default: ALL countries – be careful)
#   --genre   "news,rock"    Comma-separated tag filter (optional, case-insensitive)
#   --max  N                 Max stations per (country x genre) or per country when no genre (default: 200)
#   --debug                  Verbose progress
#   --force                  Overwrite existing .m3u and logo files
#
set -euo pipefail

# ---- deps ----
need(){ command -v "$1" >/dev/null 2>&1 || { echo "[radio] missing: $1" >&2; exit 2; }; }
need curl; need jq; command -v pix_rom_location >/dev/null 2>&1 || { echo "[radio] need pix_rom_location" >&2; exit 2; }

# ---- args ----
COUNTRIES=""; GENRES=""; MAX=200; DEBUG=0; FORCE=0
while [ $# -gt 0 ]; do
  case "$1" in
    --country) COUNTRIES="${2:-}"; shift 2;;
    --genre)   GENRES="${2:-}";   shift 2;;
    --max)     MAX="${2:-200}";   shift 2;;
    --debug)   DEBUG=1; shift;;
    --force)   FORCE=1; shift;;
    *) echo "[radio] unknown arg: $1" >&2; exit 2;;
  esac
done

# ---- discover API server ----
API="$(curl -fsSL https://all.api.radio-browser.info/json/servers | jq -r '.[0].url // empty')"
[ -n "$API" ] || API="https://de1.api.radio-browser.info"

# ---- rom root & logos path ----
ROM_ROOT="$(pix_rom_location radio || true)"
[ -n "$ROM_ROOT" ] || { echo "[radio] radio ROM root not found"; exit 1; }
LOGO_ROOT="$HOME/.emulationstation/downloaded_images/radio/logos"

mkdir -p "$LOGO_ROOT"

say(){ [ "$DEBUG" -eq 1 ] && echo "[radio] $*"; }

# ---- helpers ----
slug(){
  # to lowercase, replace non [a-z0-9]+ with '_', trim underscores
  printf '%s' "$1" | tr '[:upper:]' '[:lower:]' \
    | sed -E 's/[^a-z0-9]+/_/g; s/^_+//; s/_+$//'
}

ext_from_url(){
  case "${1##*.}" in
    png|jpg|jpeg|gif|webp|ico) echo "${1##*.}";;
    *) echo "png";;
  esac
}

join_by(){ local IFS="$1"; shift; echo "$*"; }

# list of all countries if none specified
if [ -z "$COUNTRIES" ]; then
  say "no --country given; fetching ALL countries list"
  mapfile -t COUNTRY_CODES < <(curl -fsSL "$API/json/countries" | jq -r '.[].iso_3166_2' | sed '/^$/d')
else
  IFS=',' read -r -a COUNTRY_CODES <<<"$COUNTRIES"
fi

# optional genre filters
GEN_FILTER=()
if [ -n "$GENRES" ]; then
  IFS=',' read -r -a GEN_FILTER <<<"$GENRES"
  # normalize to lowercase
  for i in "${!GEN_FILTER[@]}"; do GEN_FILTER[$i]="$(echo "${GEN_FILTER[$i]}" | tr '[:upper:]' '[:lower:]')"; done
fi

total_written=0
for CC in "${COUNTRY_CODES[@]}"; do
  CC_UP="$(echo "$CC" | tr '[:lower:]' '[:upper:]')"
  say "country: $CC_UP"

  if [ "${#GEN_FILTER[@]}" -gt 0 ]; then
    # Filtered by provided genres (tags), do a query per tag
    for G in "${GEN_FILTER[@]}"; do
      say "  tag: $G"
      JSON="$(curl -fsSL --get "$API/json/stations/search" \
        --data-urlencode "countrycode=$CC_UP" \
        --data-urlencode "hidebroken=true" \
        --data-urlencode "limit=$MAX" \
        --data-urlencode "order=clickcount" \
        --data-urlencode "reverse=true" \
        --data-urlencode "tag=$G" || true)"
      [ -n "$JSON" ] || continue

      count=0
      echo "$JSON" | jq -cr '.[] | {name, url: (.url_resolved // .url), favicon, tags}' | while read -r row; do
        NAME="$(echo "$row" | jq -r '.name // empty')"
        URL="$(echo "$row" | jq -r '.url // empty')"
        FAV="$(echo "$row" | jq -r '.favicon // empty')"
        [ -n "$NAME" ] && [ -n "$URL" ] || continue

        SAFE_NAME="$(slug "$NAME")"; [ -z "$SAFE_NAME" ] && SAFE_NAME="station"
        OUT_DIR="$ROM_ROOT/$CC_UP/$G"; OUT_M3U="$OUT_DIR/${SAFE_NAME}.m3u"
        mkdir -p "$OUT_DIR"

        if [ "$FORCE" -eq 1 ] || [ ! -f "$OUT_M3U" ]; then
          printf '#EXTM3U\n#EXTINF:-1,%s\n%s\n' "$NAME" "$URL" > "$OUT_M3U"
        fi

        # logo
        if [ -n "$FAV" ]; then
          LEXT="$(ext_from_url "$FAV")"
          LDIR="$LOGO_ROOT/$CC_UP/$G"; LOUT="$LDIR/${SAFE_NAME}.$LEXT"
          mkdir -p "$LDIR"
          if [ "$FORCE" -eq 1 ] || [ ! -f "$LOUT" ]; then
            curl -fsSL "$FAV" -o "$LOUT" || true
          fi
        fi
        count=$((count+1)); total_written=$((total_written+1))
        [ "$DEBUG" -eq 1 ] && echo "[radio]   + $CC_UP/$G/$NAME"
      done
      say "  wrote: $count (max $MAX)"
    done
  else
    # No explicit genres: fetch a big list for the country, split by the station’s first tag
    JSON="$(curl -fsSL --get "$API/json/stations/search" \
      --data-urlencode "countrycode=$CC_UP" \
      --data-urlencode "hidebroken=true" \
      --data-urlencode "limit=$MAX" \
      --data-urlencode "order=clickcount" \
      --data-urlencode "reverse=true" || true)"
    [ -n "$JSON" ] || continue

    echo "$JSON" | jq -cr '.[] | {name, url: (.url_resolved // .url), favicon, tags}' | while read -r row; do
      NAME="$(echo "$row" | jq -r '.name // empty')"
      URL="$(echo "$row" | jq -r '.url // empty')"
      FAV="$(echo "$row" | jq -r '.favicon // empty')"
      TAGS="$(echo "$row" | jq -r '.tags // ""' | tr '[:upper:]' '[:lower:]')"
      [ -n "$NAME" ] && [ -n "$URL" ] || continue

      # choose genre folder
      GEN="various"
      if [ -n "$TAGS" ]; then
        # first comma-separated tag
        GEN="$(printf '%s' "$TAGS" | awk -F',' '{gsub(/^[[:space:]]+|[[:space:]]+$/,"",$1); print $1}')"
        [ -z "$GEN" ] && GEN="various"
      fi
      GEN="$(slug "$GEN")"

      SAFE_NAME="$(slug "$NAME")"; [ -z "$SAFE_NAME" ] && SAFE_NAME="station"
      OUT_DIR="$ROM_ROOT/$CC_UP/$GEN"; OUT_M3U="$OUT_DIR/${SAFE_NAME}.m3u"
      mkdir -p "$OUT_DIR"

      if [ "$FORCE" -eq 1 ] || [ ! -f "$OUT_M3U" ]; then
        printf '#EXTM3U\n#EXTINF:-1,%s\n%s\n' "$NAME" "$URL" > "$OUT_M3U"
      fi

      # logo
      if [ -n "$FAV" ]; then
        LEXT="$(ext_from_url "$FAV")"
        LDIR="$LOGO_ROOT/$CC_UP/$GEN"; LOUT="$LDIR/${SAFE_NAME}.$LEXT"
        mkdir -p "$LDIR"
        if [ "$FORCE" -eq 1 ] || [ ! -f "$LOUT" ]; then
          curl -fsSL "$FAV" -o "$LOUT" || true
        fi
      fi

      total_written=$((total_written+1))
      [ "$DEBUG" -eq 1 ] && echo "[radio]   + $CC_UP/$GEN/$NAME"
    done
  fi
done

echo "[radio] Done. ROM root: $ROM_ROOT  |  logos: $LOGO_ROOT  |  wrote: $total_written"
