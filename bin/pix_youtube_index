#!/usr/bin/env bash
set -euo pipefail

need(){ command -v "$1" >/dev/null 2>&1 || { echo "[yt] missing: $1" >&2; exit 2; }; }
need pix_rom_location; need curl; need jq; command -v python3 >/dev/null 2>&1 || { echo "[yt] need python3" >&2; exit 2; }

DEBUG=0; FORCE=0
while [ $# -gt 0 ]; do
  case "$1" in
    --debug) DEBUG=1;;
    --force) FORCE=1;;
    *) echo "[yt] unknown arg: $1" >&2; exit 2;;
  esac; shift
done
say(){ [ "$DEBUG" -eq 1 ] && echo "[yt] $*"; }
trim(){ sed -E 's/^[[:space:]]+//; s/[[:space:]]+$//'; }
slug(){ printf '%s' "$1" | tr '[:upper:]' '[:lower:]' | sed -E 's/[^a-z0-9]+/_/g; s/^_+//; s/_+$//'; }

ROM_ROOT="$(pix_rom_location youtube || true)"; [ -n "$ROM_ROOT" ] || { echo "[yt] ROM root not found"; exit 1; }
[ -d "$ROM_ROOT" ] || { echo "[yt] Not a directory: $ROM_ROOT"; exit 1; }

AV_DIR="$HOME/.emulationstation/downloaded_images/youtube/avatars"
META_DIR="$HOME/.emulationstation/downloaded_images/youtube/meta"
mkdir -p "$AV_DIR" "$META_DIR"

UA="Mozilla/5.0 (X11; Linux) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124 Safari/537.36 pix-infinity/1.0"

# --- Python extractor: title, avatar_url, description (best-effort) ---
yt_parse(){
python3 - "$@" <<'PY'
import sys, re, json, pathlib
main = pathlib.Path(sys.argv[1]).read_text(errors="ignore")
about = pathlib.Path(sys.argv[2]).read_text(errors="ignore")
def norm(s): return s.replace("'", '"')
main, about = norm(main), norm(about)

def find(rx, text):
    m = re.search(rx, text, re.I|re.S)
    return (m.group(1).strip() if m else "")

# Title: prefer og:title, else <title>, strip " - YouTube"
title = find(r'<meta[^>]*property\s*=\s*"og:title"[^>]*content\s*=\s*"([^"]+)"', main)
if not title:
    title = find(r'<title[^>]*>([^<]+)</title>', main)
title = re.sub(r'\s*-\s*YouTube$', '', title, flags=re.I)

# Avatar: first yt3… URL; force size to s64 (replace s###- before any dash)
avatars = re.findall(r'https://yt3\.(?:ggpht|googleusercontent)\.com/[^\s"\'<>]+', main, re.I)
avatar = avatars[0] if avatars else ""
if avatar:
    avatar = re.sub(r's\d+(?=-)', 's64', avatar)

# Description: try og:description, else from /about JSON blob (simpleText)
desc = find(r'<meta[^>]*property\s*=\s*"og:description"[^>]*content\s*=\s*"([^"]+)"', main)
if not desc:
    desc = find(r'"description"\s*:\s*\{\s*"simpleText"\s*:\s*"([^"]+)"\s*\}', about)
    desc = re.sub(r'\\n', ' ', desc)  # unescape basic newlines

print(json.dumps({"title": title, "avatar": avatar, "desc": desc}, ensure_ascii=False))
PY
}

# Download avatar and normalize to 64x64 PNG centered (transparent)
save_avatar(){
  local url="$1" outpng="$2" tmp
  [ -z "$url" ] && return 1
  tmp="$(mktemp)"
  if ! curl -sSL -A "$UA" -o "$tmp" "$url"; then rm -f "$tmp"; return 1; fi
  if command -v convert >/dev/null 2>&1; then
    convert "$tmp" -alpha on \
     -resize 64x64 \
     -background none -gravity center \
     -extent 256x256 \
     -strip "$outpng"
    rm -f "$tmp"
  else
    mv "$tmp" "$outpng"
  fi
  [ -s "$outpng" ]
}

index_one(){
  local file="$1"
  local base="$(basename "$file")"
  local name="${base%.sh}"
  local sname="$(slug "$name")"
  local handle="$(head -n1 "$file" | tr -d '@' | trim)"
  [ -z "$handle" ] && { echo "[yt] skip empty: $file"; return; }

  local url="https://www.youtube.com/@$handle"
  local about="$url/about"
  say "scan: $name  → @$handle"

  # fetch pages (tolerate any status)
  local f1 f2; f1="$(mktemp)"; f2="$(mktemp)"
  curl -sSL --max-time 20 -A "$UA" -L "$url"    >"$f1" || true
  curl -sSL --max-time 20 -A "$UA" -L "$about"  >"$f2" || true

  local info title avatar desc
  info="$(yt_parse "$f1" "$f2" 2>/dev/null || echo '{}')"
  rm -f "$f1" "$f2"
  title="$(printf '%s' "$info" | jq -r '.title // empty')"
  avatar="$(printf '%s' "$info" | jq -r '.avatar // empty')"
  desc="$(printf '%s' "$info" | jq -r '.desc // empty')"

  [ -z "$title" ] && title="$handle"

  local outpng="$AV_DIR/$sname.png"
  if [ "$FORCE" -eq 1 ] || [ ! -f "$outpng" ]; then
    rm -f "$outpng" 2>/dev/null || true
    # Try parsed avatar; if missing, use unavatar as fallback
    if ! save_avatar "$avatar" "$outpng"; then
      save_avatar "https://unavatar.io/youtube/$handle?fallback=false" "$outpng" || true
    fi
  fi

  # meta
  local meta="$META_DIR/$sname.json"
  jq -n --arg name "$name" --arg handle "$handle" --arg url "$url" \
        --arg title "$title" --arg image "$outpng" --arg desc "$desc" \
        '{name:$name, handle:$handle, url:$url, title:$title, image:$image, description:$desc}' > "$meta"

  say "ok: $name  → avatar=$( [ -s "$outpng" ] && echo OK || echo MISSING )"
}

count=0
while IFS= read -r -d '' f; do
  case "$f" in *.sh|*.SH) index_one "$f"; count=$((count+1));; esac
done < <(find "$ROM_ROOT" -type f -iname '*.sh' -print0 | sort -z)

echo "[yt] Done. ROM root: $ROM_ROOT | avatars: $AV_DIR | meta: $META_DIR | files: $count"
