#!/usr/bin/env bash
set -euo pipefail

need(){ command -v "$1" >/dev/null 2>&1 || { echo "[music] missing: $1" >&2; exit 2; }; }
need pix_rom_location; need curl; need jq; command -v ffmpeg >/dev/null 2>&1 || true; command -v convert >/dev/null 2>&1 || true

DEBUG=0; FORCE=0
while [ $# -gt 0 ]; do case "$1" in --debug) DEBUG=1;; --force) FORCE=1;; *) echo "[music] unknown arg: $1" >&2; exit 2;; esac; shift; done
say(){ [ "$DEBUG" -eq 1 ] && echo "[music] $*"; }

ROM_ROOT="$(pix_rom_location music || true)"; [ -n "${ROM_ROOT:-}" ] || { echo "[music] ROM root not found"; exit 1; }
[ -d "$ROM_ROOT" ] || { echo "[music] not a directory: $ROM_ROOT"; exit 1; }
COV_ROOT="$HOME/.emulationstation/downloaded_images/music/covers"
UA="pix-infinity/1.0 (+https://example.invalid)"
ext_audio='\(mp3\|flac\|m4a\|aac\|ogg\|opus\|wav\|wma\|aif\|aiff\)'
ext_img='\(jpg\|jpeg\|png\|webp\|gif\)'

mk_placeholder(){ local out="$1" label="$2"; mkdir -p "$(dirname "$out")"
  if command -v convert >/dev/null; then convert -size 800x800 xc:'#222' -gravity center -fill '#eee' -pointsize 48 -annotate 0 "$label" -strip "$out"
  elif command -v ffmpeg >/dev/null; then ffmpeg -loglevel error -y -f lavfi -i color=c=gray:s=800x800 -frames:v 1 "$out" >/dev/null
  else : >"$out"; fi; }

extract_cover_dump(){ command -v ffmpeg >/dev/null || return 1; local in="$1" out="$2"; mkdir -p "$(dirname "$out")"
  ffmpeg -y -loglevel error -dump_attachment:t:0 "$out" -i "$in" >/dev/null 2>&1 && [ -s "$out" ]; }

extract_cover_map(){ command -v ffmpeg >/dev/null || return 1; local in="$1" out="$2"; mkdir -p "$(dirname "$out")"
  ffmpeg -y -loglevel error -i "$in" -map 0:v:0 -frames:v 1 "$out" >/dev/null 2>&1 && [ -s "$out" ]; }

tag(){ command -v ffprobe >/dev/null 2>&1 || { echo ""; return; }
  ffprobe -v quiet -show_entries format_tags="$2" -of default=nw=1:nk=1 "$1" 2>/dev/null | head -n1; }

mb_cover(){ # $1 artist, $2 album, $3 out
  local a="$1" r="$2" out="$3" id rgid
  id="$(curl -fsSL -A "$UA" --get "https://musicbrainz.org/ws/2/release" \
        --data-urlencode "query=artist:\"$a\" AND release:\"$r\"" \
        --data-urlencode "fmt=json" --data-urlencode "limit=1" \
        | jq -r '.releases[0].id // empty')" || true
  if [ -n "$id" ]; then
    curl -fsSL -A "$UA" -L "https://coverartarchive.org/release/$id/front-500" -o "$out" 2>/dev/null || true
    [ -s "$out" ] && return 0
    curl -fsSL -A "$UA" -L "https://coverartarchive.org/release/$id/front" -o "$out" 2>/dev/null || true
    [ -s "$out" ] && return 0
  fi
  # try release-group
  rgid="$(curl -fsSL -A "$UA" --get "https://musicbrainz.org/ws/2/release-group" \
        --data-urlencode "query=artist:\"$a\" AND releasegroup:\"$r\"" \
        --data-urlencode "fmt=json" --data-urlencode "limit=1" \
        | jq -r '.["release-groups"][0].id // empty')" || true
  if [ -n "$rgid" ]; then
    curl -fsSL -A "$UA" -L "https://coverartarchive.org/release-group/$rgid/front-500" -o "$out" 2>/dev/null || true
    [ -s "$out" ] && return 0
    curl -fsSL -A "$UA" -L "https://coverartarchive.org/release-group/$rgid/front" -o "$out" 2>/dev/null || true
    [ -s "$out" ] && return 0
  fi
  return 1
}

itunes_cover(){ # $1 query, $2 out
  local q="$1" out="$2" url
  url="$(curl -fsSL --get 'https://itunes.apple.com/search' \
          --data-urlencode "term=$q" --data-urlencode "entity=album" \
          --data-urlencode "limit=1" | jq -r '.results[0].artworkUrl100 // empty')" || true
  [ -z "$url" ] && return 1
  # upscale to 600 or 1000 if possible
  url="$(printf '%s\n' "$url" | sed -E 's/\/[0-9]+x[0-9]+bb\./\/600x600bb./; s/100x100/600x600/')"
  curl -fsSL -L "$url" -o "$out" || return 1
  [ -s "$out" ]
}

total=0 made=0 reused=0
mapfile -d '' DIRS < <(find "$ROM_ROOT" -type f -iregex ".*\.$ext_audio" -printf '%h\0' | sort -zu)
say "ROM root: $ROM_ROOT"; say "folders with audio: ${#DIRS[@]}"

for dir in "${DIRS[@]}"; do
  rel="${dir#$ROM_ROOT/}"; [ "$rel" = "$dir" ] && rel="."
  outdir="$COV_ROOT/$rel"; mkdir -p "$outdir"
  cov=""
  for ext in jpg jpeg png webp; do [ -f "$outdir/cover.$ext" ] && cov="$outdir/cover.$ext" && break; done
  if [ -n "$cov" ] && [ "$FORCE" -ne 1 ]; then say "reuse: $rel → $(basename "$cov")"; reused=$((reused+1)); total=$((total+1)); continue; fi

  # 1) Local image in album dir
  src_img="$(find "$dir" -maxdepth 1 -iregex ".*/\(folder.*\|cover.*\|front.*\|album.*\|albumart.*\|poster.*\)\.\($ext_img\)" -print -quit)"
  [ -z "$src_img" ] && src_img="$(find "$dir" -maxdepth 1 -iregex ".*\.\($ext_img\)" -print -quit)"
  if [ -n "$src_img" ]; then
    ext="${src_img##*.}"; ext="$(echo "$ext" | tr '[:upper:]' '[:lower:]')"
    cov="$outdir/cover.$ext"; cp -f "$src_img" "$cov"
    say "copy: $rel ← $(basename "$src_img")"; made=$((made+1)); total=$((total+1)); continue
  fi

  # read first track & tags
  track="$(find "$dir" -maxdepth 1 -type f -iregex ".*\.\($ext_audio\)" | sort | head -n1)"
  artist=""; album=""
  if [ -n "$track" ] && command -v ffprobe >/dev/null 2>&1; then
    artist="$(tag "$track" artist)"; album="$(tag "$track" album)"
  fi

  # 2) Embedded art
  if [ -n "$track" ]; then
    say "try embedded: $rel ← $(basename "$track")"
    if extract_cover_dump "$track" "$outdir/cover.jpg"; then say "embedded: dump ok"; made=$((made+1)); total=$((total+1)); continue; fi
    if extract_cover_map "$track" "$outdir/cover.jpg"; then say "embedded: map ok";  made=$((made+1)); total=$((total+1)); continue; fi
  fi

  # 3) Internet: MusicBrainz + Cover Art Archive (if artist+album)
  if [ -n "$artist" ] && [ -n "$album" ]; then
    say "try MB/CAA: $artist — $album"
    if mb_cover "$artist" "$album" "$outdir/cover.jpg"; then say "MB/CAA ok"; made=$((made+1)); total=$((total+1)); continue; fi
  fi

  # 4) Internet: iTunes Search (use tags if present, else folder name)
  q="$artist $album"; [ -z "${q// }" ] && q="$(basename "$dir")"
  say "try iTunes: $q"
  if itunes_cover "$q" "$outdir/cover.jpg"; then say "iTunes ok"; made=$((made+1)); total=$((total+1)); continue; fi

  # 5) Placeholder
  mk_placeholder "$outdir/cover.jpg" "$(basename "$dir")"
  say "placeholder: $rel"; made=$((made+1)); total=$((total+1))
done

echo "[music] Covers ready. base: $COV_ROOT | folders:$total new:$made reuse:$reused"
