sudo tee /usr/local/bin/ss-youtube >/dev/null <<'SH'
#!/bin/bash
set -euo pipefail

# --- settings ---
CFG="${HOME}/videos.cfg"
IDLE_MS="${IDLE_MS:-60000}"       # start screensaver after 60s idle
HARD_OFF_MS="${HARD_OFF_MS:-0}"   # optionally power off display after N ms idle (0 = disabled)
REQUIRE_SILENT="${REQUIRE_SILENT:-1}"  # 1 = don't trigger if audio RUNNING
KIOSK="${KIOSK_BIN:-/usr/local/bin/kiosk}"

# --- sanity ---
command -v xprintidle >/dev/null || { echo "xprintidle not installed"; exit 1; }
[[ -s "$CFG" ]] || { echo "videos.cfg missing or empty: $CFG"; exit 1; }
[[ -x "$KIOSK" ]] || { echo "kiosk wrapper not found: $KIOSK"; exit 1; }

# Pick a random "ID,SECS" line (ignore comments/blank)
pick() {
  awk -F, 'NF>=2 && $1 !~ /^#/ {print $0}' "$CFG" | shuf -n1
}

# Best-effort audio activity check (Pulse over PipeWire):
# returns 0 if audio looks active (RUNNING), 1 otherwise
audio_active() {
  command -v pactl >/dev/null 2>&1 || return 1
  # Look for any sink input in RUNNING state
  pactl list sink-inputs 2>/dev/null | awk '
    /^State:/ { if ($2 == "RUNNING") run=1 }
    END{ exit run?0:1 }
  '
}

# Wait until idle threshold is met (and optionally silent)
wait_for_idle() {
  while :; do
    idle=$(xprintidle 2>/dev/null || echo 0)
    if (( idle >= IDLE_MS )); then
      if [[ "$REQUIRE_SILENT" = "1" ]] && audio_active; then
        sleep 2
      else
        break
      fi
    else
      sleep 1
    fi
  done
}

# Returns 0 if user became active (idle < 2s), else 1 if still idle
user_active_now() {
  local i=$(xprintidle 2>/dev/null || echo 0)
  (( i < 2000 ))
}

# Play a single video; stop if user becomes active
play_one() {
  local line id secs url p
  line="$(pick)"
  id="${line%%,*}"
  secs="${line##*,}"
  secs="${secs//[[:space:]]/}"
  [[ -z "$id" || -z "$secs" ]] && return 1

  url="https://www.youtube.com/embed/${id}?autoplay=1&controls=0&rel=0&modestbranding=1&playsinline=1"
  # Start kiosk in background and watch it
  "$KIOSK" "$url" &
  p=$!

  local elapsed=0
  while (( elapsed < secs )); do
    sleep 1
    ((elapsed++))
    if user_active_now; then
      kill "$p" 2>/dev/null || true
      wait "$p" 2>/dev/null || true
      return 0
    fi
  done

  kill "$p" 2>/dev/null || true
  wait "$p" 2>/dev/null || true
  return 0
}

# Optional: power off display after HARD_OFF_MS total idle
maybe_poweroff_display() {
  [[ "$HARD_OFF_MS" -gt 0 ]] || return 0
  local i=$(xprintidle 2>/dev/null || echo 0)
  if (( i >= HARD_OFF_MS )); then
    # X11 DPMS off; display powers back on with any input
    command -v xset >/dev/null 2>&1 && xset dpms force off || true
  fi
}

# -------- main --------
wait_for_idle
play_one
maybe_poweroff_display
exit 0
SH
sudo chmod +x /usr/local/bin/ss-youtube
